var jetSet = Set("Boeing", "Airbus");jetSet += "Lear";println(jetSet.contains("Cessna"));val movieSet = scala.collection.mutable.Set("Hitch", "Poltergeist");movieSet += "Shrek";movieSet.+=("Shrek");println(movieSet);// Because the set in Listing 3.6 is mutable, there is no need to// reassign movieSet, which is why it can be a val. By contrast,// using += with the immutable set in Listing 3.5 required reassigning// jetSet, which is why it must be a var.val hashSet = scala.collection.immutable.HashSet("Tomatoes", "Chilies");println(hashSet + "Coriander");val treasureMap = scala.collection.mutable.Map[Int, String]();// The explicit type parameterization, “[Int, String]”, is required in// Listing 3.7 because without any values passed to the factory method,// the compiler is unable to infer the map’s type parameters. By// contrast, the compiler can infer the type parameters from the values// passed to the map factory shown in Listing 3.8, thus no explicit type parameters are needed.treasureMap += (1 -> "Go to island.");treasureMap += ((2).->("Find big X on ground."));treasureMap += (3 -> "Dig.");Console.println(treasureMap(2));// On the next three lines you add key/value pairs to the map using the// -> and += methods. As illustrated previously, the Scala compiler// transforms a binary operation expression like 1 -> "Go to island."// into (1).->("Go to island."). Thus, when you say 1 -> "Go to island.",// you are actually calling a method named -> on an integer with the value// 1, passing in a string with the value "Go to island." This -> method,// which you can invoke on any object in a Scala program, returns a// two-element tuple containing the key and value.8 You then pass this// tuple to the += method of the map object to which treasureMap refers.// The Scala mechanism that allows you to invoke -> on any object,// implicit conversion, will be covered in Chapter 21.// Given there are no imports, when you say Map in the first line of// List- ing 3.8, you’ll get the default: a// scala.collection.immutable.Map. You pass five key/value tuples to// the map’s factory method, which returns an im- mutable Map containing// the passed key/value pairs.val romanNumeral = Map(          1 -> "I", 2 -> "II", 3 -> "III", 4 -> "IV", 5 -> "V"        );println(romanNumeral(4));